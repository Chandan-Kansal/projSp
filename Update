import java.util.*;

public class Main {
    static int countOfState;
    static Map<String, Integer> statemappingnumber = new HashMap<>();
    static ArrayList<ArrayList<Pair<Float, Pair<String, Integer>>>> adj;

    static void addInGraph(int source, int destination, float price, float time, String mode) {
        adj.get(source).add(new Pair<>(price, new Pair<>(mode, destination)));
    }

    static void makeGraph(String source, String destination, float price, float time, String mode) {
        int sourceNum, destinationNum;
        if (statemappingnumber.containsKey(source)) {
            sourceNum = statemappingnumber.get(source);
        } else {
            sourceNum = countOfState;
            statemappingnumber.put(source, countOfState++);
        }

        if (statemappingnumber.containsKey(destination)) {
            destinationNum = statemappingnumber.get(destination);
        } else {
            destinationNum = countOfState;
            statemappingnumber.put(destination, countOfState++);
        }

        addInGraph(sourceNum, destinationNum, price, time, mode);
    }

    static String minimumTimeRoute(int source, int destination) {
        PriorityQueue<Pair<Integer, Pair<Integer, String>> > pq = new PriorityQueue<>(Comparator.comparing(Pair::getFirst));
        pq.add(new Pair<>(0, new Pair<>(source, "")));
        int[] vis = new int[countOfState];

        while (!pq.isEmpty()) {
            Pair<Integer, Pair<Integer, String>> top = pq.poll();
            int time = top.getFirst();
            int node = top.getSecond().getFirst();
            String path = top.getSecond().getSecond();
            vis[node] = 1;

            if (node == destination) {
                StringBuilder ans = new StringBuilder();
                int tempNum = 0;
                String tempMode = "";
                String tempSource = null;
                String tempDestination = null;

                for (int i = 1; i < path.length(); i++) {
                    char currentChar = path.charAt(i);
                    if (currentChar == ' ') {
                        ans.append("Take ").append(tempMode).append(" From ").append(tempSource).append(" to ").append(tempDestination).append(" then ");
                        tempNum = 0;
                        tempMode = "";
                        tempSource = tempDestination;
                        tempDestination = null;
                    } else if (currentChar == '_') {
                        continue;
                    } else if (currentChar >= 'A' && currentChar <= 'Z') {
                        if (currentChar == 'B') {
                            tempMode += "Bus";
                        } else if (currentChar == 'F') {
                            tempMode += "Flight";
                        } else {
                            tempMode += "Train";
                        }
                    } else {
                        tempNum = tempNum * 10 + (currentChar - '0');
                    }
                }

                ans.append("it will take ").append(time).append(" hours that is the minimum time");
                return ans.toString();
            }

            for (Pair<Float, Pair<String, Integer>> it : adj.get(node)) {
                int nextNode = it.getSecond().getSecond();
                if (vis[nextNode] == 0) {
                    String temp = " " + nextNode + "_" + it.getSecond().getFirst() + " ";
                    pq.add(new Pair<>(time + it.getFirst(), new Pair<>(nextNode, path + temp)));
                }
            }
        }

        return "no route";
    }

    public static void main(String[] args) {
        // Initialize countOfState and adj
        countOfState = 1000000;
        adj = new ArrayList<>();
        for (int i = 0; i < countOfState; i++) {
            adj.add(new ArrayList<>());
        }

        makeGraph("Delhi", "Chandigarh", 5000.0f, 2.0f, "F");
        makeGraph("Delhi", "Chandigarh", 2000.0f, 4.0f, "T");
        makeGraph("Delhi", "Chandigarh", 300.0f, 6.0f, "B");

        makeGraph("Delhi", "Patiala", 1800.0f, 6.0f, "T");
        makeGraph("Delhi", "Patiala", 800.0f, 8.0f, "B");
        makeGraph("Delhi", "Pune", 6000.0f, 3.0f, "F");
        makeGraph("Delhi", "Pune", 3500.0f, 14.0f, "T");
                makeGraph("Delhi", "Pune", 2000.0f, 20.0f, "B");
        makeGraph("Chandigarh", "Delhi", 4500.0f, 2.0f, "F");
        makeGraph("Chandigarh", "Delhi", 1000.0f, 6.0f, "B");
        makeGraph("Chandigarh", "Delhi", 2000.0f, 4.0f, "T");
        makeGraph("Chandigarh", "Patiala", 400.0f, 1.0f, "T");
        makeGraph("Chandigarh", "Patiala", 200.0f, 2.0f, "B");
        makeGraph("Chandigarh", "Pune", 8000.0f, 4.0f, "F");
        makeGraph("Chandigarh", "Pune", 4000.0f, 18.0f, "T");
        makeGraph("Chandigarh", "Pune", 3500.0f, 24.0f, "B");
        makeGraph("Patiala", "Chandigarh", 400.0f, 1.0f, "T");
        makeGraph("Patiala", "Chandigarh", 200.0f, 2.0f, "B");
        makeGraph("Patiala", "katra", 2000.0f, 2.0f, "F");
        makeGraph("Patiala", "Delhi", 1800.0f, 6.0f, "T");
        makeGraph("Patiala", "Delhi", 800.0f, 8.0f, "B");
        makeGraph("Patiala", "Pune", 3800.0f, 20.0f, "T");
        makeGraph("Pune", "Delhi", 6500.0f, 3.0f, "F");
        makeGraph("Pune", "Delhi", 3500.0f, 14.0f, "T");
        makeGraph("Pune", "Delhi", 2500.0f, 20.0f, "B");
        makeGraph("Pune", "Chandigarh", 8200.0f, 4.0f, "F");
        makeGraph("Pune", "Chandigarh", 3800.0f, 18.0f, "T");
        makeGraph("Pune", "Chandigarh", 3200.0f, 24.0f, "B");
        makeGraph("Pune", "Patiala", 3800.0f, 20.0f, "T");

        String result = minimumTimeRoute(statemappingnumber.get("Patiala"), statemappingnumber.get("Pune"));
        System.out.println(result);
    }
}

